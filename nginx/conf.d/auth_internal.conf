# INTERNAL auth endpoints — nginx will call your Flask app to validate.
# App must expose: GET /internal/auth?service=<code>
# It should read the Bearer token from Authorization header OR "token" cookie OR "token" query param
# and return 200 if valid and allowed for the requested service; 401/403 otherwise.
#
# On 200, the app should include optional headers:
#   X-User: user email or id
#   X-Services: CSV of allowed services
# nginx captures them via auth_request_set and can pass to upstream.
location = /_auth_nextcloud {
  internal;
  proxy_pass http://app:8000/internal/auth?service=nextcloud;
  proxy_set_header Authorization $http_authorization;
  proxy_set_header X-Device-Token $device_token_any;
  include /etc/nginx/conf.d/snippets/proxy_common.conf;
}
location = /_auth_jellyfin {
  internal;
  proxy_pass http://app:8000/internal/auth?service=media;
  proxy_set_header Authorization $http_authorization;
  proxy_set_header X-Device-Token $device_token_any;
  include /etc/nginx/conf.d/snippets/proxy_common.conf;
}
# Minecraft: no JWT required — we simply don't gate it here.
